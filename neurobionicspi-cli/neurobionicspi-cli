#!/bin/bash

# Exit on any error
set -e

# Log file and helper function
LOG_FILE="/etc/neurobionicspi-cli.log"
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Check root privileges
if [ "$(id -u)" != "0" ]; then
    log_message "ERROR: This tool must be run as root. Please use sudo"
    exit 1
fi

log_message "================================================="
log_message "neurobionicspi-cli starting"

# Variables for connectivity routine
wifi="wlan0"
entnetworkssid=""

# Configuration files
client_conf="/etc/systemd/network/08-${wifi}-CLI.network"
ap_conf="/etc/systemd/network/12-${wifi}-AP.network"
client_wifi_conf="/etc/wpa_supplicant/config/wpa_supplicant-${wifi}-client.conf"
ap_wifi_conf="/etc/wpa_supplicant/config/wpa_supplicant-${wifi}-ap.conf"
wifi_conf="/etc/wpa_supplicant/wpa_supplicant-${wifi}.conf"
COUNT_FILE="/etc/neurobionicspi-cli.count"

# Backup configuration files
backup_configs() {
    local timestamp
    timestamp=$(date +%Y%m%d_%H%M%S)
    cp "$client_wifi_conf" "${client_wifi_conf}.${timestamp}.backup" 2>/dev/null || true
    cp "$ap_wifi_conf" "${ap_wifi_conf}.${timestamp}.backup" 2>/dev/null || true
    log_message "Configuration files backed up"
}

# Check network connectivity
check_connectivity() {
    local max_attempts=3
    local attempt=1

    while [ "$attempt" -le "$max_attempts" ]; do
        if ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
            log_message "Network connectivity confirmed"
            return 0
        fi
        attempt=$((attempt + 1))
        sleep 2
    done

    log_message "ERROR: No network connectivity after $max_attempts attempts"
    return 1
}

# Initialize success count
if [ -f "$COUNT_FILE" ]; then
    SUCCESS_COUNT=$(cat "$COUNT_FILE")
else
    SUCCESS_COUNT=0
    echo "$SUCCESS_COUNT" > "$COUNT_FILE"
fi

is_ap_conf() {
    if [ -e "$ap_conf" ]; then
        log_message "is_ap_conf: True"
        return 0
    else
        log_message "is_ap_conf: False"
        return 1
    fi
}

is_wpa_ap() {
    if wpa_cli -i "$wifi" status | grep -q "^mode=AP$"; then
        log_message "is_wpa_cli_ap: True"
        return 0
    else
        log_message "is_wpa_cli_ap: False"
        return 1
    fi
}

is_client_conf() {
    if [ -e "$client_conf" ]; then
        log_message "is_client_conf: True"
        return 0
    else
        log_message "is_client_conf: False"
        return 1
    fi
}

is_wpa_client() {
    if wpa_cli -i "$wifi" status | grep -q "^mode=station$"; then
        log_message "is_wpa_client: True"
        return 0
    else
        log_message "is_wpa_client: False"
        return 1
    fi
}

# Configuring Access Point (AP) mode
configure_ap() {
    log_message "Configuring AP mode..."
    backup_configs

    if is_wpa_client; then
        if ! cp "$ap_wifi_conf" "$wifi_conf"; then
            log_message "ERROR: Failed to copy AP configuration"
            return 1
        fi

        if is_client_conf; then
            log_message "Removing client configuration"
            mv "$client_conf" "${client_conf}~"
        fi

        if ! is_ap_conf; then
            log_message "Creating AP network configuration"
            mv "${ap_conf}~" "$ap_conf"
        fi

        log_message "Restarting networkd"
        if ! systemctl restart systemd-networkd; then
            log_message "ERROR: Failed to restart networkd"
            return 1
        fi
    fi

    # Verify AP mode is active
    sleep 5
    if ! is_wpa_ap; then
        log_message "ERROR: Failed to enable AP mode"
        return 1
    fi

    log_message "AP mode configured successfully"
    return 0
}

# Configuring Client (CLI) mode
configure_client() {
    log_message "Configuring client mode..."
    backup_configs

    if ! cp "$client_wifi_conf" "$wifi_conf"; then
        log_message "ERROR: Failed to copy client configuration"
        return 1
    fi

    if is_wpa_ap; then
        if is_ap_conf; then
            log_message "AP network configuration exists. Removing AP configuration"
            mv "$ap_conf" "${ap_conf}~"
        fi

        if ! is_client_conf; then
            log_message "Client network configuration is missing. Creating client network configuration"
            mv "${client_conf}~" "$client_conf"
        fi

        log_message "Restarting networkd"
        if ! systemctl restart systemd-networkd; then
            log_message "ERROR: Failed to restart networkd"
            return 1
        fi
    elif is_wpa_client; then
        if is_ap_conf; then
            log_message "Both AP and client network configurations exist. Removing AP configuration and restarting networkd"
            mv "$ap_conf" "${ap_conf}~"
        fi

        log_message "In client mode but not configured as such. Restarting networkd"
        if ! systemctl restart systemd-networkd; then
            log_message "ERROR: Failed to restart networkd"
            return 1
        fi
    else
        log_message "WARNING: Neither AP nor client mode is active"
        return 1
    fi
}

# Reconfigure wpa_supplicant after a delay
reconfigure_wpa_supplicant() {
    local delay="$1"
    sleep "$delay"
    wpa_cli -i "$wifi" reconfigure
}

# Update the BSSID in the configuration file
update_bssid() {
    log_message "Updating BSSID for network: $entnetworkssid"

    # Verify SSID is provided
    if [ -z "$entnetworkssid" ]; then
        log_message "ERROR: No SSID provided"
        return 1
    fi

    # Perform network scan
    if ! wpa_cli -i "$wifi" scan; then
        log_message "ERROR: Failed to initiate network scan"
        return 1
    fi
    sleep 2

    # Get scan results
    local best_bssid
    best_bssid=$(wpa_cli -i "$wifi" scan_results | awk -v ssid="$entnetworkssid" '$2 == ssid {print $1; exit}')

    if [ -z "$best_bssid" ]; then
        log_message "ERROR: No BSSID found for network $entnetworkssid"
        return 1
    fi

    # Check if the SSID exists in the configuration
    if grep -q "ssid=\"$entnetworkssid\"" "$client_wifi_conf"; then
        log_message "$entnetworkssid network block found in the configuration file"

        # Find the line number of the first occurrence of the SSID network block
        start_line=$(grep -n "ssid=\"$entnetworkssid\"" "$client_wifi_conf" | awk -F ":" 'NR==1{print $1}')
        if [ -z "$start_line" ]; then
            log_message "ERROR: Could not determine start line for SSID block"
            return 1
        fi

        # Find the end line of the SSID network block
        end_line=$(awk "/ssid=\"$entnetworkssid\"/,/}/" "$client_wifi_conf" | grep -n "}" | awk -F ":" 'NR==1{print $1}')
        if [ -z "$end_line" ]; then
            log_message "ERROR: Could not determine end line for SSID block"
            return 1
        fi
        end_line=$((start_line + end_line - 1))

        # Check if the BSSID tag already exists
        if awk "/ssid=\"$entnetworkssid\"/,/}/" "$client_wifi_conf" | grep -q "bssid="; then
            # Extract the existing BSSID
            original_bssid=$(awk "/ssid=\"$entnetworkssid\"/,/}/" "$client_wifi_conf" | grep "bssid=" | head -n1 | awk -F "=" '{print $2}' | tr -d ' ')

            # Check if update is needed
            if [ "$original_bssid" != "$best_bssid" ]; then
                # Replace the existing BSSID with the new one
                sed -i "${end_line}i\    bssid=\"$best_bssid\"" "$client_wifi_conf"
                log_message "BSSID updated to \"$best_bssid\". Network restart required."
                reconfigure_wpa_supplicant 1
                return 0
            else
                log_message "Best BSSID matches the original. No network restart required."
            fi
        else
            # Add the BSSID tag to the configuration file
            sed -i "${end_line}i\    bssid=\"$best_bssid\"" "$client_wifi_conf"
            log_message "Added BSSID \"$best_bssid\" to the configuration file."

            log_message "Restarting the networking now!"
            reconfigure_wpa_supplicant 1
            return 0
        fi
    else
        log_message "$entnetworkssid network block not found in the configuration file. Skipping BSSID update."
    fi
}

# Manual execution via command line arguments
case "$1" in

    --help)
        echo -e ""
        echo -e "Usage: \e[1mneurobionicspi-cli [OPTION]\e[0m"
        echo -e ""
        echo -e "\e[1mOptions:\e[0m"
        echo -e ""
        echo -e "  \e[1;36m--start-ap\e[0m          Enable Access Point (AP) mode. This will turn your device into a wireless access point."
        echo -e "  \e[1;36m--stop-ap\e[0m           Disable Access Point (AP) mode. This will turn off the wireless access point mode and turn on client mode."
        echo -e "  \e[1;36m--show-networks\e[0m     Show defined networks. This will display a list of all networks defined in the configuration file."
        echo -e "  \e[1;36m--add-network\e[0m       Adds a network to the wpa_supplicant configuration file but does not connect to it. Please use --select-network to connect to the network."
        echo -e "  \e[1;36m--select-network\e[0m    Select a network by index. This allows you to choose a network from the list of defined networks."
        echo -e "  \e[1;36m--update-bssid\e[0m      Update the BSSID in the configuration file. This will change the BSSID of the enterprise network."
        echo -e "  \e[1;36m--send-ip\e[0m           Send the IP address via email. This will send the device's current IP address to the specified email address(es)."
        echo -e "  \e[1;36m--add-email\e[0m         Add an email address to the recipient list. This will add a new email address to the list of recipients for IP address notifications."
        echo -e ""
        exit 0
        ;;

    --start-ap)
        configure_ap
        reconfigure_wpa_supplicant 1
        exit 0
        ;;

    --stop-ap)
        configure_client
        reconfigure_wpa_supplicant 1
        exit 0
        ;;

    --select-network)
        if [ -z "$2" ]; then
            echo "Usage: $0 --select-network <network_index>"
            exit 1
        fi
        configure_client
        wpa_cli -i "$wifi" select_network "$2"
        exit 0
        ;;

    --add-network)
        if [ $# -lt 4 ]; then
            echo "Usage: $0 --add-network <SSID> <PSK> <PRIORITY>"
            exit 1
        fi
        ssid="$2"
        psk="$3"
        priority="$4"
        echo -e "\nnetwork={\n\tpriority=$priority\n\tscan_ssid=1\n\tssid=\"$ssid\"\n\tpsk=\"$psk\"\n}" >> "$client_wifi_conf"
        log_message "Network '$ssid' added successfully with priority $priority."
        exit 0
        ;;

    --show-networks)
        awk -F= '/^[ \t]*ssid=/ {gsub(/"/, "", $2); if (!seen[$2]++) print NR-1, $2}' "$client_wifi_conf"
        exit 0
        ;;

    --update-bssid)
        update_bssid
        exit $?
        ;;

    --is-ap)
        is_ap_conf
        exit $?
        ;;

    --is-client)
        is_client_conf
        exit $?
        ;;

    --send-ip)
        if [ ! -x /etc/startup_mailer.py ]; then
            log_message "ERROR: /etc/startup_mailer.py not found or not executable."
            exit 1
        fi
        python3 /etc/startup_mailer.py
        exit $?
        ;;

    --add-email)
        if [ -z "$2" ]; then
            echo "Usage: $0 --add-email <email_address>"
            exit 1
        fi

        email="$2"

        if grep -q "$email" /etc/startup_mailer.py; then
            echo "Email address is already present."
            exit 0
        fi

        sed -i "s/\(recipient_str = \"\)\([^\"]*\)\"/\1\2, $email\"/" /etc/startup_mailer.py
        log_message "Email address '$email' added successfully."
        exit 0
        ;;

    --remove-email)
        if [ -z "$2" ]; then
            echo "Usage: $0 --remove-email <email_address>"
            exit 1
        fi
        email="$2"

        if grep -q "$email" /etc/startup_mailer.py; then
            log_message "Email address '$email' found. Proceeding to remove it."
            sed -i "s/\(recipient_str = \".*\),\? $email\([^\"]*\"\)/\1\2/" /etc/startup_mailer.py
            log_message "Email address '$email' removed successfully."
            exit 0
        fi

        echo "Email address '$email' not found."
        exit 1
        ;;

    *)
        echo "Invalid option. Use --help to see available options."
        exit 1
        ;;
esac

# Automated execution based on wpa_supplicant activity
case "$2" in

    AP-ENABLED)
        log_message "AP mode is enabled."
        configure_ap
        ;;

    CONNECTED)
        log_message "Network connection detected"
        configure_client

        if is_wpa_client && check_connectivity; then
            if send_ip_address; then
                log_message "SUCCESS: Client mode configured and IP address sent"
            else
                log_message "WARNING: Client mode configured but failed to send IP"
                configure_ap
            fi
        else
            log_message "ERROR: Failed to establish stable connection"
            configure_ap
        fi
        ;;

    DISCONNECTED)
        log_message "Disconnected: Configure client mode."
        configure_client
        reconfigure_wpa_supplicant 1
        ;;

    *)
        log_message "Unknown event: $2"
        ;;
esac